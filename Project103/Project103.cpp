//Порядок вызова деструкторов при наследовании. Деструкторы. ООП C++ Для начинающих. Урок #101 - Видео №117.
#include<iostream>
#include<string>
using namespace std;

class A
{
public:
	A()
	{
		cout << "Вызвался конструктор класса А " << endl;
	}

	~A()
	{
		cout << "Вызвался диструктор класса А " << endl;
	}
};

class B : public A
{
public:
	B()
	{
		cout << "Вызвался конструктор класса В " << endl;
	}

	~B()
	{
		cout << "Вызвался диструктор класса B " << endl;
	}
};

class C : public B
{
public:
	C()
	{
		cout << "Вызвался конструктор класса C " << endl;
	}

	~C()
	{
		cout << "Вызвался диструктор класса C " << endl;
	}
};
int main()
{
	setlocale(LC_ALL,"ru");

	C val;
	cout << endl;

	return 0;
}
/*Если классы друг другу наследованны, то конструкторы вызываються с верху в них скажем так. Тоесть, мы хотим вызвать
конструктор класса С, то класс С так как наследует класс В, обращаеться к нему, чтоб сначала вызвать его, а класс В,
обращаеться к классу А, так чтоб вызвывать конструктор у него и вывод идёт вызова - А - В - С, а диструктор, начинает его вызывать
сразу, но при этом не забывая по цепочки вызвать и другие наследованные классы и их деструторы, тоесть С - В - А.*/