//c++ ссылки что это. c++ ссылки и указатели разница. Указатель на ссылку. Для начинающих. Урок #50

#include<iostream>
using namespace std;

void main()
{
	setlocale(LC_ALL, "Ru");

	int a = 5;

	int *pa = &a;

	int &aRef = a;


	/* Пример арифметического сдвига адреса указателя. После pa = pa+2; адрес указателя в оперативной памяти сдвигаеться,
	или прибавляеться 8 байт, и от этого меняеться дарес указателя в оперативной памяти.
	cout << "*pa\t" << pa << endl;
	pa = pa+2;
	cout << "*pa\t" << pa << endl;
	*/

	/* Пример сдвига ссылки.В данном случаии после aRef++; ссылка меняет своё значение с 5 на 6.
	cout << "&aRef\t" << aRef << endl;
	aRef++;
	cout << "&aRef\t" << aRef << endl; 
	*/

	/*Изменяем переменную с помощью указателя. Причём до написания aRef = 55; будет 5, 
	а после 55. Мы не прибавляем а заменяем значение переменной.
	cout << "a\t" << a << endl;
	cout << "&aRef\t" << aRef << endl;
	aRef = 55;
	cout << "&aRef\t" << aRef << endl;
	cout << "a\t" << a << endl; 
	*/


	/*Разница между указателмем - int* pp; и ссылкой int& pref;. 
	В терминале компелятор с такой записью int *pp; ошибку не выдас, и покажет адрес в памяьти.
	А вот уже int &pref; выдаст ошибку, указателю нужны значения на которые он будет ссылться
	int *pp;
	int &pref;
	*/
	
	// Ещё один пример, изминения переменной, спомощью указателя на ссылку.
	int *ppa = &aRef;
	cout << "a\t" << a << endl;
	*ppa = 12;
	cout << "a\t" << a << endl;

	/*Вся суть данного урока, в том что подобные записи ссылок и указателей, экономит ресурсы
	компа, сервера оборудования и так далее. Вместо прописывания полного цикла, алгоритма, можно 
	использовать ссылки, указатели, которые занимают меньше места и быстрей функционируют.*/
}